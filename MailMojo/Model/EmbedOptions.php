<?php
/**
 * EmbedOptions
 *
 * PHP version 5
 *
 * @category Class
 * @package  MailMojo
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * MailMojo API
 *
 * v1 of the MailMojo API
 *
 * OpenAPI spec version: 1.1.0
 * Contact: hjelp@mailmojo.no
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.14
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace MailMojo\MailMojo\Model;

use \ArrayAccess;
use \MailMojo\ObjectSerializer;

/**
 * EmbedOptions Class Doc Comment
 *
 * @category Class
 * @package  MailMojo
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class EmbedOptions implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Embed_options';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'content_manifest_url' => 'string',
        'enable_dev_features' => 'bool',
        'enable_newsletters_index' => 'bool',
        'enable_subscription_management' => 'bool',
        'locale' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'content_manifest_url' => 'url',
        'enable_dev_features' => null,
        'enable_newsletters_index' => null,
        'enable_subscription_management' => null,
        'locale' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'content_manifest_url' => 'content_manifest_url',
        'enable_dev_features' => 'enable_dev_features',
        'enable_newsletters_index' => 'enable_newsletters_index',
        'enable_subscription_management' => 'enable_subscription_management',
        'locale' => 'locale'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'content_manifest_url' => 'setContentManifestUrl',
        'enable_dev_features' => 'setEnableDevFeatures',
        'enable_newsletters_index' => 'setEnableNewslettersIndex',
        'enable_subscription_management' => 'setEnableSubscriptionManagement',
        'locale' => 'setLocale'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'content_manifest_url' => 'getContentManifestUrl',
        'enable_dev_features' => 'getEnableDevFeatures',
        'enable_newsletters_index' => 'getEnableNewslettersIndex',
        'enable_subscription_management' => 'getEnableSubscriptionManagement',
        'locale' => 'getLocale'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const LOCALE_EN_US = 'en_US';
    const LOCALE_NB_NO = 'nb_NO';
    const LOCALE_SV_SE = 'sv_SE';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getLocaleAllowableValues()
    {
        return [
            self::LOCALE_EN_US,
            self::LOCALE_NB_NO,
            self::LOCALE_SV_SE,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['content_manifest_url'] = isset($data['content_manifest_url']) ? $data['content_manifest_url'] : null;
        $this->container['enable_dev_features'] = isset($data['enable_dev_features']) ? $data['enable_dev_features'] : null;
        $this->container['enable_newsletters_index'] = isset($data['enable_newsletters_index']) ? $data['enable_newsletters_index'] : true;
        $this->container['enable_subscription_management'] = isset($data['enable_subscription_management']) ? $data['enable_subscription_management'] : true;
        $this->container['locale'] = isset($data['locale']) ? $data['locale'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getLocaleAllowableValues();
        if (!is_null($this->container['locale']) && !in_array($this->container['locale'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'locale', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets content_manifest_url
     *
     * @return string
     */
    public function getContentManifestUrl()
    {
        return $this->container['content_manifest_url'];
    }

    /**
     * Sets content_manifest_url
     *
     * @param string $content_manifest_url content_manifest_url
     *
     * @return $this
     */
    public function setContentManifestUrl($content_manifest_url)
    {
        $this->container['content_manifest_url'] = $content_manifest_url;

        return $this;
    }

    /**
     * Gets enable_dev_features
     *
     * @return bool
     */
    public function getEnableDevFeatures()
    {
        return $this->container['enable_dev_features'];
    }

    /**
     * Sets enable_dev_features
     *
     * @param bool $enable_dev_features enable_dev_features
     *
     * @return $this
     */
    public function setEnableDevFeatures($enable_dev_features)
    {
        $this->container['enable_dev_features'] = $enable_dev_features;

        return $this;
    }

    /**
     * Gets enable_newsletters_index
     *
     * @return bool
     */
    public function getEnableNewslettersIndex()
    {
        return $this->container['enable_newsletters_index'];
    }

    /**
     * Sets enable_newsletters_index
     *
     * @param bool $enable_newsletters_index enable_newsletters_index
     *
     * @return $this
     */
    public function setEnableNewslettersIndex($enable_newsletters_index)
    {
        $this->container['enable_newsletters_index'] = $enable_newsletters_index;

        return $this;
    }

    /**
     * Gets enable_subscription_management
     *
     * @return bool
     */
    public function getEnableSubscriptionManagement()
    {
        return $this->container['enable_subscription_management'];
    }

    /**
     * Sets enable_subscription_management
     *
     * @param bool $enable_subscription_management enable_subscription_management
     *
     * @return $this
     */
    public function setEnableSubscriptionManagement($enable_subscription_management)
    {
        $this->container['enable_subscription_management'] = $enable_subscription_management;

        return $this;
    }

    /**
     * Gets locale
     *
     * @return string
     */
    public function getLocale()
    {
        return $this->container['locale'];
    }

    /**
     * Sets locale
     *
     * @param string $locale locale
     *
     * @return $this
     */
    public function setLocale($locale)
    {
        $allowedValues = $this->getLocaleAllowableValues();
        if (!is_null($locale) && !in_array($locale, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'locale', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['locale'] = $locale;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


